
/*
 * CORBA interfaces for Dyna. Prefixes 'C' and 'IC' are used to avoid confusion
 * with plain Java version.
 */

module com {
module dawidweiss {
module dyna {
module corba {
module bindings {

	/*
	 * Forward references and typedefs.
	 */
	
	interface ICGameServer;
	interface ICGameListener;
	interface ICGame;
	interface ICPlayerController;

	struct CPlayer;
	struct CPlayerState;
	struct CPlayerStatus;
	struct CControllerState;
	struct CGameResult;

    /*
     * Cels are int-coded.
     * <pre>
     * 0x007f - The int-ordinal of CellType
     * 0xff80 - Cell counter associated with the cell.
     * </pre> 
     */
    typedef sequence<short> CCellSeq;

	typedef sequence<CPlayer> CPlayerSeq;
    typedef sequence<CPlayerState> CPlayerStateSeq;
    typedef sequence<CPlayerStatus> CPlayerStatusSeq;

	/**
	 * A player is described with a name and unique id.
	 */
	struct CPlayer {
	    long id;
	    wstring name;
	};

	/*
	 * Basic data types.
	 */
    struct CDimension {
       long width, height;
    };

    struct CPoint {
       long x, y;
    };
	
	/*
	 * Game events. Propagated by value as a union of structures corresponding
	 * to Java event types.
	 */

	struct CPlayerState {
	   long animationFrame;
	   long animationState;
	   boolean dead;
	   boolean immortal;
	   CPoint position;
	};

	struct CBoardInfo {
	   CDimension gridSize;
	   long cellSize;
	   CDimension pixelSize;
	};	 

	enum CGameEventType {
		GAME_STATE, SOUND_EFFECT, GAME_START, GAME_OVER
	};

	struct CGameState {
	   CCellSeq cells;
	   CPlayerStateSeq players;
	};
	
	struct CGameStart {
	   CBoardInfo boardInfo;
	};

	struct CGameOver {
		CGameResult result;
	};

	enum CSoundEffectType {
	    BOMB, BONUS, DYING
	};

	struct CSoundEffect {
		CSoundEffectType effect;
		long count;
	};

	union CGameEvent switch (CGameEventType) {
		case GAME_STATE:
			CGameState gameState;
		case SOUND_EFFECT:
			CSoundEffect soundEffect;
	    case GAME_START:
	        CGameStart gameStart;
	    case GAME_OVER:
	    	CGameOver gameOver;
	};
	typedef sequence<CGameEvent> CGameEventSeq; 

    /**
     * Player status during and after the game.
     */
    struct CPlayerStatus {
        long id;
        long deathFrame;
        long killedEnemies;
        long livesLeft;
        boolean immortal;
        boolean dead;
    };

	/**
	 * Game result.
	 */    
    struct CGameResult {
    	wstring gameMode;
    	CPlayerStatusSeq stats;
    	boolean gameInterrupted;
    };

	/*
	 * Controller structures.
	 */

    enum CDirection
    {
        LEFT, RIGHT, UP, DOWN, NONE
    };

	struct CControllerState {
	   CDirection direction;
	   boolean dropsBomb;
	};

	/**
	 * A game server is the main object on which players are registered and games are 
	 * started. 
	 */
	interface ICGameServer {
	    /** Register a new player in the controller. Player name must be unique. */
	    CPlayer register(in wstring name, in ICPlayerController controller);

	    /** Unregister an existing player. */
	    void unregister(in wstring name);

	    /** Create a game for a set of players. */
	    ICGame create(in long boardNumber, in CPlayerSeq players);

	    /** Currently registered players. */
	    CPlayerSeq players();
	};

	/**
	 * A single game between a set of players.
	 */
	interface ICGame {
	    /**
	     * Starts the game and executes the entire game loop or until
	     * the given number of frames is reached. Zero means no limit is imposed. 
	     */
	    CGameResult run(in long framesLimit);

        /** Add an extra game listener. */
	    void add(in ICGameListener listener);

        /** Remove an extra game listener. */
	    void remove(in ICGameListener listener);
	};

	/**
	 * A game listener receives events from one or more games.
	 */
	interface ICGameListener {
	   /**
	    * The game is about to start.
	    */
	   void onStart(in CBoardInfo boardInfo, in CPlayerSeq players);

	   /**
	    * An asynchronous callback received on each game frame.
	    */
	   oneway void onFrame(in long frame, in CGameEventSeq events);

	   /**
	    * Game over event.
	    */
	   void onEnd(in CGameResult result);
	};

	/**
	 * Game controller expects player control signals to be passed via this interface.
	 */ 
	interface ICControllerCallback {
        /**
         * This is a synchronous call, so conserve the resources of your client
         * and avoid sending spurious messages.
         */
        void update(in CControllerState state);
	};

	/**
	 * A controller for a single remote player.
	 */
    interface ICPlayerController : ICGameListener {
        /**
         * Invoked by the game controller just before the game starts. The 
         * player's controller should pass state information to the provided callback
         * object and <b>must not</b> flood it with requests. It is advised to have
         * one call every time the state needs to be changed.
         */  
        void onControllerSetup(in ICControllerCallback callback); 
    };
};
};
};
};
};